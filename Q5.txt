class Solution {
    public String longestPalindrome(String s) {
        final String t = join('@' + s + '$', '#');
    final int n = t.length();
    int[] maxExtends = new int[n];
    int center = 0;
    for (int i = 1; i < n - 1; ++i) {
      final int rightBoundary = center + maxExtends[center];
      final int mirrorIndex = center - (i - center);
      maxExtends[i] =
          rightBoundary > i && Math.min(rightBoundary - i, maxExtends[mirrorIndex]) > 0 ? 1 : 0;
      while (t.charAt(i + 1 + maxExtends[i]) == t.charAt(i - 1 - maxExtends[i]))
        ++maxExtends[i];
      if (i + maxExtends[i] > rightBoundary)
        center = i;
    }
    int maxExtend = 0;
    int bestCenter = -1;
    for (int i = 0; i < n; ++i)
      if (maxExtends[i] > maxExtend) {
        maxExtend = maxExtends[i];
        bestCenter = i;
      }
    return s.substring((bestCenter - maxExtend) / 2, (bestCenter + maxExtend) / 2);
  }
  private String join(final String s, char c) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); ++i) {
      sb.append(s.charAt(i));
      if (i != s.length() - 1)
        sb.append(c);
    }
    return sb.toString();
    }
}